const fs = require('fs');

const args = process.argv.slice(2);
if (args.length < 4) {
  throw new Error('Expected to get 4 arguments, showing how many Roots, Views, Panels and Modals' +
    ' can be contained on each hierarchy level\nEpic -> Root -> View -> Panel -> Modal\nExample: node generate-types.js 7 7 15 10')
}

const ROUTE_TYPE_LETTERS = ['R', 'V', 'P', 'M'];

const PREPARED_ROUTE_TYPE = 'PR';
const CLEANED_UP_PARAMS_TYPE = 'CUP';

const NAME = 'N';
const PARAMS = 'K';

writeTypesDefinition()

function writeTypesDefinition() {
  fs.readFile('bin/template.ts.template', 'utf8', (err, data) => {
    if (err) {
      console.error(err);
      return;
    }
    fs.writeFile('src/autogenerated-types.ts', `${data}\n${renderCreateRoutesForRoots(args)}\n\n${renderCreateRoutesForViews(args)}`, err => {
      if (err) {
        console.error(err);
      }
    });
  });
}

function renderCreateRoutesForRoots([roots, views, panels, modals]) {
  const genericTypes = renderCreateRoutesForRootsGenericTypes([roots, views, panels, modals]);
  const argumentType = renderCreateRoutesForRootsArgumentTypes([roots, views, panels, modals]);
  const outputTypes = renderCreateRoutesForRootsOutputTypes([roots, views, panels, modals]);
  return `declare function createRoutesForRoots<\n  ${genericTypes}\n>(data: ${argumentType}): ${outputTypes};`;
}

function renderCreateRoutesForRootsGenericTypes([roots, views, panels, modals]) {
  const parameters = calculateParameters([roots, views, panels, modals]).map((val) => `${val} extends string`);
  return renderGroupedInLines(parameters, 4);
}

function renderCreateRoutesForRootsArgumentTypes([roots, views, panels, modals]) {
  const rootTypes = [];
  for (let i = 0; i < roots; i += 1) {
    rootTypes.push(renderCreateRoutesForRootParameterTypes([views, panels, modals], [i]));
  }
  return `[\n${rootTypes.join(',\n')}\n]`;
}

function renderCreateRoutesForRootParameterTypes([views, panels, modals], [ri]) {
  const parameters = calculateRootParameters([views, panels, modals], ri);
  const renderedTypeParameters = renderGroupedInLines(parameters, 10, 4);
  return `  RootConfig<${renderedTypeParameters}>?`;
}

function renderCreateRoutesForRootsOutputTypes([roots, views, panels, modals]) {
  const renderedRoots = [];
  for (let i = 0; i < roots; i += 1) {
    renderedRoots.push(renderRootOutput([views, panels, modals], [i]));
  }
  return renderedRoots.join(' & ');
}

function renderCreateRoutesForViews([, views, panels, modals]) {
  const genericTypes = renderCreateRoutesForRootsGenericTypes([0, views, panels, modals]);
  const argumentType = renderCreateRoutesForViewsArgumentTypes([views, panels, modals]);
  const outputTypes = renderCreateRoutesForViewsOutputTypes([views, panels, modals]);
  return `declare function createRoutesForViews<\n  ${genericTypes}\n>(data: ${argumentType}): ${outputTypes};`;
}

function renderCreateRoutesForViewsArgumentTypes([views, panels, modals]) {
  const viewTypes = [];
  viewTypes.push(renderCreateRoutesForViewParameterTypes([views, panels, modals]));
  return `[\n${viewTypes.join(',\n')}\n]`;
}

function renderCreateRoutesForViewParameterTypes([views, panels, modals]) {
  const parameters = calculateRootParameters([views, panels, modals], 0);
  const renderedTypeParameters = renderGroupedInLines(parameters, 10, 4);
  return `  ViewConfig<${renderedTypeParameters}>?`;
}

function renderCreateRoutesForViewsOutputTypes([views, panels, modals]) {
  const renderedViews = [];
  for (let i = 0; i < views; i += 1) {
    renderedViews.push(renderViewOutput([panels, modals], [0, i]));
  }
  return renderedViews.join(' & ');
}

function renderGroupedInLines(parameters, inOneLine, indent = 2) {
  const groupedParams = [];
  const indentStr = new Array(indent).fill(' ').join('');
  for (let i = 0; i < parameters.length; i += inOneLine) {
    groupedParams.push(parameters.slice(i, i + inOneLine).join(', '));
  }
  return groupedParams.map((val) => `${val}`).join(`,\n${indentStr}`);
}

function calculateParameters([roots, views, panels, modals]) {
  const parameters = [];
  if (roots === 0) {
    parameters.push(...calculateRootParameters([views, panels, modals], 0));
  } else {
    for(let ri = 0; ri < roots; ri += 1) {
      const rootName = buildRouteName([ri]);
      parameters.push(`${rootName}${NAME}`);
      parameters.push(`${rootName}${PARAMS}`);
      parameters.push(...calculateRootParameters([views, panels, modals], ri));
    }
  }
  return parameters;
}

function calculateRootParameters([views, panels, modals], ri) {
  const parameters = [];
  for(let vi = 0; vi < views; vi += 1) {
    const viewName = buildRouteName([ri, vi]);
    parameters.push(`${viewName}${NAME}`);
    parameters.push(`${viewName}${PARAMS}`);
    for(let pi = 0; pi < panels; pi += 1) {
      const panelName = buildRouteName([ri, vi, pi]);
      parameters.push(`${panelName}${NAME}`);
      parameters.push(`${panelName}${PARAMS}`);
      for(let mi = 0; mi < modals; mi += 1) {
        const modalName = buildRouteName([ri, vi, pi, mi]);
        parameters.push(`${modalName}${NAME}`);
        parameters.push(`${modalName}${PARAMS}`);
      }
    }
  }
  return parameters;
}

function renderPreparedRoute(childrenArguments, index, baseName = '', baseParams = [], indent = 2) {
  const indentStr = new Array(indent).fill(' ').join('');
  const biggerIndentStr = new Array(indent).fill(' ').join('');
  const children = [];
  const name = `${baseName}${ROUTE_TYPE_LETTERS[ROUTE_TYPE_LETTERS - childrenArguments.length - 1]}`;
  const params = baseParams.slice().concat(`${name}${PARAMS}`);
  for (let i = 0; i < childrenArguments[0] ?? 0; i += 1) {
    children.push(renderPreparedRoute(childrenArguments.slice(1), i, name, params, indent + 2));
  }
  const renderedChildren = children.length ? `,\n${biggerIndentStr}${children.join(', ')}\n${indentStr}` : '';
  return `${PREPARED_ROUTE_TYPE}<${name}${NAME}, ${CLEANED_UP_PARAMS_TYPE}<${params.join(', ')}>${renderedChildren}>`;
}

function renderRootOutput([views, panels, modals], [ri]) {
  const renderedViews = [];
  const name = buildRouteName([ri]);
  const params = buildRouteParams([ri]);
  for (let i = 0; i < views; i += 1) {
    renderedViews.push(renderViewOutput([panels, modals], [ri, i]));
  }
  return `${PREPARED_ROUTE_TYPE}<${name}${NAME}, ${CLEANED_UP_PARAMS_TYPE}<${params}>,\n    ${renderedViews.join(', ')}\n  >`;
}

function renderViewOutput([panels, modals], [ri, vi]) {
  const renderedViews = [];
  const name = buildRouteName([ri, vi]);
  const params = buildRouteParams([ri, vi]);
  for (let i = 0; i < panels; i += 1) {
    renderedViews.push(renderPanelOutput([modals], [ri, vi, i]));
  }
  return `${PREPARED_ROUTE_TYPE}<${name}${NAME}, ${CLEANED_UP_PARAMS_TYPE}<${params}>,\n      ${renderedViews.join(', ')}\n    >`;
}

function renderPanelOutput([modals], [ri, vi, pi]) {
  const renderedViews = [];
  const name = buildRouteName([ri, vi, pi]);
  const params = buildRouteParams([ri, vi, pi]);
  for (let i = 0; i < modals; i += 1) {
    renderedViews.push(renderModalOutput([ri, vi, pi, i]));
  }
  return `${PREPARED_ROUTE_TYPE}<${name}${NAME}, ${CLEANED_UP_PARAMS_TYPE}<${params}>,\n${renderedViews.join(',\n')}\n      >`;
}

function renderModalOutput([ri, vi, pi, mi]) {
  const name = buildRouteName([ri, vi, pi, mi]);
  const params = buildRouteParams([ri, vi, pi, mi]);
  return `        ${PREPARED_ROUTE_TYPE}<${name}${NAME}, ${CLEANED_UP_PARAMS_TYPE}<${params}>>`;
}

function buildRouteName(indexes) {
  return indexes.map((num, index) => `${ROUTE_TYPE_LETTERS[index]}${num}`).join('');
}

function buildRouteParams(indexes) {
  return indexes.map((num, index, arr) => `${buildRouteName(arr.slice(0, index + 1))}${PARAMS}`).join(', ');
}
