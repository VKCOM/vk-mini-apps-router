const fs = require('fs');

const args = process.argv.slice(2).map((item) => parseInt(item, 10));
if (args.length < 4) {
  throw new Error('Expected to get 4 arguments, showing how many Roots, Views, Panels and Modals' +
    ' can be contained on each hierarchy level\nEpic -> Root -> View -> Panel -> Modal\nExample: node generate-types.js 7 7 15 10')
}

const ROUTE_TYPE_LETTERS = ['R', 'V', 'P', 'M'];

const PREPARED_ROUTE_TYPE = 'PR';
const CLEANED_UP_PARAMS_TYPE = 'CUP';

const NAME = 'N';
const PARAMS = 'K';

writeTypesDefinition()

function writeTypesDefinition() {
  fs.readFile('bin/template.ts.template', 'utf8', (err, data) => {
    if (err) {
      console.error(err);
      return;
    }
    const result = [
      data,
      renderRootConfigType(args.slice(1)),
      renderViewConfigType(args.slice(2)),
      renderPanelConfigType(args[3]),
      renderCreateRoutesForRoots(args),
      renderCreateRoutesForViews(args),
    ].join('\n\n');
    fs.writeFile('src/autogenerated-types.ts', result, err => {
      if (err) {
        console.error(err);
      }
    });
  });
}

function renderCreateRoutesForRoots([roots, views, panels, modals]) {
  const genericTypes = renderCreateRoutesForRootsGenericTypes([roots, views, panels, modals]);
  const argumentType = renderCreateRoutesForRootsArgumentTypes([roots, views, panels, modals]);
  const outputTypes = renderCreateRoutesForRootsOutputTypes([roots, views, panels, modals]);
  return `declare function createRoutesForRoots<\n  ${genericTypes}\n>(data: ${argumentType}): ${outputTypes};`;
}

function renderCreateRoutesForRootsGenericTypes(arguments) {
  const parameters = calculateParameters(arguments).map((val) => `${val} extends string`);
  return renderGroupedInLines(parameters, 4);
}

function renderCreateRoutesForRootsArgumentTypes([roots, views, panels, modals]) {
  const rootTypes = [];
  for (let i = 0; i < roots; i += 1) {
    rootTypes.push(renderCreateRoutesForRootParameterTypes([views, panels, modals], [i]));
  }
  return `[\n${rootTypes.join(',\n')}\n]`;
}

function renderCreateRoutesForRootParameterTypes([views, panels, modals], [ri]) {
  const parameters = calculateParametersForItem([views, panels, modals], ri);
  const renderedTypeParameters = renderGroupedInLines(parameters, 10, 4);
  return `  RootConfig<${renderedTypeParameters}>?`;
}

function renderCreateRoutesForRootsOutputTypes([roots, views, panels, modals]) {
  const renderedRoots = [];
  for (let i = 0; i < roots; i += 1) {
    renderedRoots.push(renderPreparedRoute([views, panels, modals], [i]));
  }
  return renderedRoots.join(' & ');
}

function renderCreateRoutesForViews([, views, panels, modals]) {
  const genericTypes = renderCreateRoutesForRootsGenericTypes([views, panels, modals]);
  const argumentType = renderCreateRoutesForViewsArgumentTypes([views, panels, modals]);
  const outputTypes = renderCreateRoutesForViewsOutputTypes([views, panels, modals]);
  return `declare function createRoutesForViews<\n  ${genericTypes}\n>(data: ${argumentType}): ${outputTypes};`;
}

function renderCreateRoutesForViewsArgumentTypes([views, panels, modals]) {
  const viewTypes = [];
  for (let i = 0; i < views; i += 1) {
    viewTypes.push(renderCreateRoutesForViewParameterTypes([panels, modals], i));
  }
  return `[\n${viewTypes.join(',\n')}\n]`;
}

function renderCreateRoutesForViewParameterTypes([panels, modals], index) {
  const parameters = calculateParametersForItem([panels, modals], index);
  const renderedTypeParameters = renderGroupedInLines(parameters, 10, 4);
  return `  ViewConfig<${renderedTypeParameters}>?`;
}

function renderCreateRoutesForViewsOutputTypes([views, panels, modals]) {
  const renderedViews = [];
  for (let i = 0; i < views; i += 1) {
    renderedViews.push(renderPreparedRoute([panels, modals], i));
  }
  return renderedViews.join(' & ');
}

function renderGroupedInLines(parameters, inOneLine, indent = 2) {
  const groupedParams = [];
  const indentStr = new Array(indent).fill(' ').join('');
  for (let i = 0; i < parameters.length; i += inOneLine) {
    groupedParams.push(parameters.slice(i, i + inOneLine).join(', '));
  }
  return groupedParams.map((val) => `${val}`).join(`,\n${indentStr}`);
}

function calculateParameters(childrenArguments, baseName = '') {
  const parameters = [];
  for(let i = 0; i < childrenArguments[0]; i += 1) {
      parameters.push(...calculateParametersForItem(childrenArguments.slice(1), i, baseName));
  }
  return parameters;
}

function calculateParametersForItem(childrenArguments, index, baseName = '') {
  const parameters = [];
  const name = buildRouteName(baseName, childrenArguments.length + 1, index);
  parameters.push(`${name}${NAME}`);
  parameters.push(`${name}${PARAMS}`);
  if (childrenArguments.length > 0) {
    parameters.push(...calculateParameters(childrenArguments, name));
  }
  return parameters;
}

function renderPreparedRoute(childrenArguments, index, baseName = '', baseParams = [], indent = 2) {
  const indentStr = new Array(indent).fill(' ').join('');
  const biggerIndentStr = new Array(indent + 2).fill(' ').join('');
  const children = [];
  const name = buildRouteName(baseName, childrenArguments.length + 1, index);
  const params = baseParams.slice().concat(`${name}${PARAMS}`);
  for (let i = 0; i < childrenArguments[0] ?? 0; i += 1) {
    children.push(renderPreparedRoute(childrenArguments.slice(1), i, name, params, indent + 2));
  }
  const childSeparator = childrenArguments.length > 1 ? ', ' : `,\n${biggerIndentStr}`;
  const renderedChildren = children.length ? `,\n${biggerIndentStr}${children.join(childSeparator)}\n${indentStr}` : '';
  return `${PREPARED_ROUTE_TYPE}<${name}${NAME}, ${CLEANED_UP_PARAMS_TYPE}<${params.join(', ')}>${renderedChildren}>`;
}

function buildRouteName(baseName, depth, index) {
  return `${baseName}${ROUTE_TYPE_LETTERS[ROUTE_TYPE_LETTERS.length - depth]}${index}`;
}

function renderPanelConfigType(modals) {
  const params = calculateParametersForItem([modals], 0, '');
  const renderedModals = [];
  const paramsPerModal = 2;
  for (let i = 2; i < params.length; i += paramsPerModal) {
    renderedModals.push(`    ModalConfig<${renderGroupedInLines(params.slice(i, i + paramsPerModal), 10, 6)}>?,`)
  }
  return `type PanelConfig<
  ${renderGroupedInLines(params.map((item) => `${item} extends string`), 5)}
> = {
  panel: ${params[0]};
  path: string;
  params?: ${params[1]}[];
  modals?: [
${renderedModals.join('\n')}
  ];
}`;
}

function renderViewConfigType([panels, modals]) {
  const params = calculateParametersForItem([panels, modals], 0, '');
  const children = [];
  const paramsPerPanel = 2 * (1 + modals);
  for (let i = 2; i < params.length; i += paramsPerPanel) {
    children.push(`    PanelConfig<${renderGroupedInLines(params.slice(i, i + paramsPerPanel), 10, 6)}>?,`)
  }
  return `type ViewConfig<
  ${renderGroupedInLines(params.map((item) => `${item} extends string`), 5)}
> = {
  view: ${params[0]};
  path: string;
  params?: ${params[1]}[];
  panels?: [
${children.join('\n')}
  ];
}`;
}

function renderRootConfigType([views, panels, modals]) {
  const params = calculateParametersForItem([views, panels, modals], 0, '');
  const children = [];
  const paramsPerView = 2 * (1 + panels * (1 + modals));
  for (let i = 2; i < params.length; i += paramsPerView) {
    children.push(`    ViewConfig<${renderGroupedInLines(params.slice(i, i + paramsPerView), 10, 6)}>?,`)
  }
  return `type RootConfig<
  ${renderGroupedInLines(params.map((item) => `${item} extends string`), 5)}
> = {
  root: ${params[0]};
  path: string;
  params?: ${params[1]}[];
  views?: [
${children.join('\n')}
  ];
}`;
}
